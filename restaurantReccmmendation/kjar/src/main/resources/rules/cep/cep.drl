package cep;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

rule "Recommend restaurant based on recent visits and preferred cuisine"
when
    $user: User()
    accumulate(
        Review(
            $restaurant: restaurant,
            user == $user,
            $rating: rating
        ) over window:time(7d),
        $count : count($restaurant);
        $count >= 2
    )
    $recentVisits: ArrayList() from collect(
        Review(
            $restaurant: restaurant,
            user == $user
        ) over window:time(7d)
    )
    $preferredCuisine: CuisineType() from $recentVisits.get(0).restaurant.getCuisineType()
then
    ArrayList<Restaurant> recommendedRestaurants = new ArrayList<>();
    for (Object review : $recentVisits) {
        Restaurant visitedRestaurant = ((Review) review).getRestaurant();
        CuisineType preferredCuisine = visitedRestaurant.getCuisineType();
        for (Restaurant restaurant : RestaurantList.getAllRestaurants()) {
            if (restaurant.getCuisineType().equals(preferredCuisine) && !visitedRestaurant.equals(restaurant)) {
                recommendedRestaurants.add(restaurant);
            }
        }
    }

    Collections.sort(recommendedRestaurants, new Comparator<Restaurant>() {
        @Override
        public int compare(Restaurant r1, Restaurant r2) {
            return Integer.compare(getReviewCount(r2), getReviewCount(r1));
        }

        private int getReviewCount(Restaurant restaurant) {
            return restaurant.getReviews().size();
        }
    });

    if (recommendedRestaurants.size() > 10) {
        recommendedRestaurants.subList(10, recommendedRestaurants.size()).clear();
    }

    $user.setRecommendedRestaurants(recommendedRestaurants);
end